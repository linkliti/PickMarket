version: "3"
services:
  # pmparser (python parser)
  parser:
    ports:
      - 5000:5000
      # - 9999:9999
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "/bin/grpc_health_probe -addr=parser:5000 -service=parser"]
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s # Browser startup
    build:
      context: ./pmparser
      dockerfile: app.dockerfile
    # environment:
    #   - DEBUG=True
    env_file:
      - ./pmparser/.env
    volumes:
      - ./logs/pmparser.log:/application/pmparser.log

  # postgreSQL
  db:
    ports:
      - 5001:5001
    command: -p 5001
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5001"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: on-failure:3
    image: postgres:15.2
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/001.sql
      - ./db/pgdata:/var/lib/postgresql/data

  # categoriesWorker
  categories_worker:
    ports:
      - 5002:5002
    depends_on:
      db:
        condition: service_healthy
      parser:
        condition: service_healthy
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "/bin/grpc_health_probe -addr=categories_worker:5002 -service=categories"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5m # Possible categories parsing
    build:
      context: ./backend/
      dockerfile: categoriesWorker.dockerfile
      args:
        SERVICE_NAME: categoriesWorker
    # environment:
    #   - DEBUG=True
    env_file:
      - ./backend/.env
    volumes:
      - ./logs/categoriesWorker.log:/application/categoriesWorker.log

  # itemsWorker
  items_worker:
    ports:
      - 5003:5003
    depends_on:
      db:
        condition: service_healthy
      parser:
        condition: service_healthy
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "/bin/grpc_health_probe -addr=items_worker:5003 -service=items"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    build:
      context: ./backend/
      dockerfile: itemsWorker.dockerfile
      args:
        SERVICE_NAME: itemsWorker
    # environment:
    #   - DEBUG=True
    env_file:
      - ./backend/.env
    volumes:
      - ./logs/itemsWorker.log:/application/itemsWorker.log

  # requestHandler
  request_handler:
    ports:
      - 5004:5004
    depends_on:
        categories_worker:
          condition: service_healthy
        items_worker:
          condition: service_healthy
    restart: on-failure:3
    healthcheck:
      test: ["CMD-SHELL", "curl -s -f -X GET http://request_handler:5004/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s
    build:
      context: ./backend/
      dockerfile: requestHandler.dockerfile
      args:
        SERVICE_NAME: requestHandler
    # environment:
    #   - DEBUG=True
    env_file:
      - ./backend/.env
    volumes:
      - ./logs/requestHandler.log:/application/requestHandler.log
  # frontend
  frontend:
    ports:
      - 5005:5005
    depends_on:
      request_handler:
        condition: service_healthy
    restart: on-failure:3
    build:
      context: ./frontend/
      dockerfile: app.dockerfile
    env_file:
      - ./frontend/.env
    # volumes:
    #   - ./logs/frontend.log:/application/frontend.log
