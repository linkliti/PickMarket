// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/items.proto" (package "app.protos", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ItemParser } from "./items";
import type { FilterResponse } from "./items";
import type { FiltersRequest } from "./items";
import type { CharacteristicResponse } from "./items";
import type { CharacteristicsRequest } from "./items";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ItemResponse } from "./items";
import type { ItemsRequest } from "./items";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service app.protos.ItemParser
 */
export interface IItemParserClient {
    /**
     * @generated from protobuf rpc: GetItems(app.protos.ItemsRequest) returns (stream app.protos.ItemResponse);
     */
    getItems(input: ItemsRequest, options?: RpcOptions): ServerStreamingCall<ItemsRequest, ItemResponse>;
    /**
     * @generated from protobuf rpc: GetItemCharacteristics(app.protos.CharacteristicsRequest) returns (stream app.protos.CharacteristicResponse);
     */
    getItemCharacteristics(input: CharacteristicsRequest, options?: RpcOptions): ServerStreamingCall<CharacteristicsRequest, CharacteristicResponse>;
    /**
     * @generated from protobuf rpc: GetCategoryFilters(app.protos.FiltersRequest) returns (stream app.protos.FilterResponse);
     */
    getCategoryFilters(input: FiltersRequest, options?: RpcOptions): ServerStreamingCall<FiltersRequest, FilterResponse>;
}
/**
 * @generated from protobuf service app.protos.ItemParser
 */
export class ItemParserClient implements IItemParserClient, ServiceInfo {
    typeName = ItemParser.typeName;
    methods = ItemParser.methods;
    options = ItemParser.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetItems(app.protos.ItemsRequest) returns (stream app.protos.ItemResponse);
     */
    getItems(input: ItemsRequest, options?: RpcOptions): ServerStreamingCall<ItemsRequest, ItemResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ItemsRequest, ItemResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetItemCharacteristics(app.protos.CharacteristicsRequest) returns (stream app.protos.CharacteristicResponse);
     */
    getItemCharacteristics(input: CharacteristicsRequest, options?: RpcOptions): ServerStreamingCall<CharacteristicsRequest, CharacteristicResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CharacteristicsRequest, CharacteristicResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCategoryFilters(app.protos.FiltersRequest) returns (stream app.protos.FilterResponse);
     */
    getCategoryFilters(input: FiltersRequest, options?: RpcOptions): ServerStreamingCall<FiltersRequest, FilterResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<FiltersRequest, FilterResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
