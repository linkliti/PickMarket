// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/items.proto" (package "app.protos", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BoolFilter } from "./types";
import { SelectionFilter } from "./types";
import { RangeFilter } from "./types";
import { Filters } from "./types";
import { StringList } from "./types";
import { Status } from "../../google/rpc/status";
import { Markets } from "./types";
/**
 * @generated from protobuf message app.protos.ItemsRequest
 */
export interface ItemsRequest {
    /**
     * @generated from protobuf field: app.protos.Markets market = 1;
     */
    market: Markets;
    /**
     * @generated from protobuf field: string pageUrl = 2;
     */
    pageUrl: string;
    /**
     * @generated from protobuf field: optional string userQuery = 3;
     */
    userQuery?: string;
    /**
     * @generated from protobuf field: optional string params = 4;
     */
    params?: string;
    /**
     * @generated from protobuf field: optional int32 numOfPages = 5;
     */
    numOfPages?: number;
}
/**
 * @generated from protobuf message app.protos.ItemResponse
 */
export interface ItemResponse {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "item";
        /**
         * @generated from protobuf field: app.protos.Item item = 1;
         */
        item: Item;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: google.rpc.Status status = 2;
         */
        status: Status;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string imageUrl = 3;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: bool isAdult = 4;
     */
    isAdult: boolean;
    /**
     * @generated from protobuf field: double price = 5;
     */
    price: number;
    /**
     * @generated from protobuf field: optional double oldPrice = 6;
     */
    oldPrice?: number;
    /**
     * @generated from protobuf field: optional double rating = 7;
     */
    rating?: number;
    /**
     * @generated from protobuf field: optional int32 comments = 8;
     */
    comments?: number;
    /**
     * @generated from protobuf field: bool original = 9;
     */
    original: boolean;
}
/**
 * @generated from protobuf message app.protos.CharacteristicsRequest
 */
export interface CharacteristicsRequest {
    /**
     * @generated from protobuf field: app.protos.Markets market = 1;
     */
    market: Markets;
    /**
     * @generated from protobuf field: string itemUrl = 2;
     */
    itemUrl: string;
}
/**
 * @generated from protobuf message app.protos.CharacteristicResponse
 */
export interface CharacteristicResponse {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "char";
        /**
         * @generated from protobuf field: app.protos.Characteristic char = 1;
         */
        char: Characteristic;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: google.rpc.Status status = 2;
         */
        status: Status;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.Characteristic
 */
export interface Characteristic {
    /**
     * @generated from protobuf field: string key = 1;
     */
    key: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: double charWeight = 3;
     */
    charWeight: number; // RequestHandler field
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "numVal";
        /**
         * @generated from protobuf field: double numVal = 4;
         */
        numVal: number;
    } | {
        oneofKind: "listVal";
        /**
         * @generated from protobuf field: app.protos.StringList listVal = 5;
         */
        listVal: StringList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.FiltersRequest
 */
export interface FiltersRequest {
    /**
     * @generated from protobuf field: app.protos.Markets market = 1;
     */
    market: Markets;
    /**
     * @generated from protobuf field: string categoryUrl = 2;
     */
    categoryUrl: string;
}
/**
 * @generated from protobuf message app.protos.FilterResponse
 */
export interface FilterResponse {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "filter";
        /**
         * @generated from protobuf field: app.protos.Filter filter = 1;
         */
        filter: Filter;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: google.rpc.Status status = 2;
         */
        status: Status;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string key = 2;
     */
    key: string;
    /**
     * @generated from protobuf field: string externalType = 3;
     */
    externalType: string;
    /**
     * @generated from protobuf field: app.protos.Filters internalType = 4;
     */
    internalType: Filters;
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "rangeFilter";
        /**
         * @generated from protobuf field: app.protos.RangeFilter rangeFilter = 5;
         */
        rangeFilter: RangeFilter;
    } | {
        oneofKind: "selectionFilter";
        /**
         * @generated from protobuf field: app.protos.SelectionFilter selectionFilter = 6;
         */
        selectionFilter: SelectionFilter;
    } | {
        oneofKind: "boolFilter";
        /**
         * @generated from protobuf field: app.protos.BoolFilter boolFilter = 7;
         */
        boolFilter: BoolFilter;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ItemsRequest$Type extends MessageType<ItemsRequest> {
    constructor() {
        super("app.protos.ItemsRequest", [
            { no: 1, name: "market", kind: "enum", T: () => ["app.protos.Markets", Markets] },
            { no: 2, name: "pageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "userQuery", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "params", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "numOfPages", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ItemsRequest>): ItemsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.market = 0;
        message.pageUrl = "";
        if (value !== undefined)
            reflectionMergePartial<ItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemsRequest): ItemsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Markets market */ 1:
                    message.market = reader.int32();
                    break;
                case /* string pageUrl */ 2:
                    message.pageUrl = reader.string();
                    break;
                case /* optional string userQuery */ 3:
                    message.userQuery = reader.string();
                    break;
                case /* optional string params */ 4:
                    message.params = reader.string();
                    break;
                case /* optional int32 numOfPages */ 5:
                    message.numOfPages = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Markets market = 1; */
        if (message.market !== 0)
            writer.tag(1, WireType.Varint).int32(message.market);
        /* string pageUrl = 2; */
        if (message.pageUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pageUrl);
        /* optional string userQuery = 3; */
        if (message.userQuery !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.userQuery);
        /* optional string params = 4; */
        if (message.params !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.params);
        /* optional int32 numOfPages = 5; */
        if (message.numOfPages !== undefined)
            writer.tag(5, WireType.Varint).int32(message.numOfPages);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.ItemsRequest
 */
export const ItemsRequest = new ItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemResponse$Type extends MessageType<ItemResponse> {
    constructor() {
        super("app.protos.ItemResponse", [
            { no: 1, name: "item", kind: "message", oneof: "message", T: () => Item },
            { no: 2, name: "status", kind: "message", oneof: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<ItemResponse>): ItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemResponse): ItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Item item */ 1:
                    message.message = {
                        oneofKind: "item",
                        item: Item.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).item)
                    };
                    break;
                case /* google.rpc.Status status */ 2:
                    message.message = {
                        oneofKind: "status",
                        status: Status.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).status)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Item item = 1; */
        if (message.message.oneofKind === "item")
            Item.internalBinaryWrite(message.message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status status = 2; */
        if (message.message.oneofKind === "status")
            Status.internalBinaryWrite(message.message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.ItemResponse
 */
export const ItemResponse = new ItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("app.protos.Item", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "imageUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isAdult", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "oldPrice", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "rating", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "comments", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "original", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.url = "";
        message.imageUrl = "";
        message.isAdult = false;
        message.price = 0;
        message.original = false;
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string imageUrl */ 3:
                    message.imageUrl = reader.string();
                    break;
                case /* bool isAdult */ 4:
                    message.isAdult = reader.bool();
                    break;
                case /* double price */ 5:
                    message.price = reader.double();
                    break;
                case /* optional double oldPrice */ 6:
                    message.oldPrice = reader.double();
                    break;
                case /* optional double rating */ 7:
                    message.rating = reader.double();
                    break;
                case /* optional int32 comments */ 8:
                    message.comments = reader.int32();
                    break;
                case /* bool original */ 9:
                    message.original = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string imageUrl = 3; */
        if (message.imageUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.imageUrl);
        /* bool isAdult = 4; */
        if (message.isAdult !== false)
            writer.tag(4, WireType.Varint).bool(message.isAdult);
        /* double price = 5; */
        if (message.price !== 0)
            writer.tag(5, WireType.Bit64).double(message.price);
        /* optional double oldPrice = 6; */
        if (message.oldPrice !== undefined)
            writer.tag(6, WireType.Bit64).double(message.oldPrice);
        /* optional double rating = 7; */
        if (message.rating !== undefined)
            writer.tag(7, WireType.Bit64).double(message.rating);
        /* optional int32 comments = 8; */
        if (message.comments !== undefined)
            writer.tag(8, WireType.Varint).int32(message.comments);
        /* bool original = 9; */
        if (message.original !== false)
            writer.tag(9, WireType.Varint).bool(message.original);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharacteristicsRequest$Type extends MessageType<CharacteristicsRequest> {
    constructor() {
        super("app.protos.CharacteristicsRequest", [
            { no: 1, name: "market", kind: "enum", T: () => ["app.protos.Markets", Markets] },
            { no: 2, name: "itemUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CharacteristicsRequest>): CharacteristicsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.market = 0;
        message.itemUrl = "";
        if (value !== undefined)
            reflectionMergePartial<CharacteristicsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharacteristicsRequest): CharacteristicsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Markets market */ 1:
                    message.market = reader.int32();
                    break;
                case /* string itemUrl */ 2:
                    message.itemUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharacteristicsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Markets market = 1; */
        if (message.market !== 0)
            writer.tag(1, WireType.Varint).int32(message.market);
        /* string itemUrl = 2; */
        if (message.itemUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.CharacteristicsRequest
 */
export const CharacteristicsRequest = new CharacteristicsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharacteristicResponse$Type extends MessageType<CharacteristicResponse> {
    constructor() {
        super("app.protos.CharacteristicResponse", [
            { no: 1, name: "char", kind: "message", oneof: "message", T: () => Characteristic },
            { no: 2, name: "status", kind: "message", oneof: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<CharacteristicResponse>): CharacteristicResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CharacteristicResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CharacteristicResponse): CharacteristicResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Characteristic char */ 1:
                    message.message = {
                        oneofKind: "char",
                        char: Characteristic.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).char)
                    };
                    break;
                case /* google.rpc.Status status */ 2:
                    message.message = {
                        oneofKind: "status",
                        status: Status.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).status)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CharacteristicResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Characteristic char = 1; */
        if (message.message.oneofKind === "char")
            Characteristic.internalBinaryWrite(message.message.char, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status status = 2; */
        if (message.message.oneofKind === "status")
            Status.internalBinaryWrite(message.message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.CharacteristicResponse
 */
export const CharacteristicResponse = new CharacteristicResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Characteristic$Type extends MessageType<Characteristic> {
    constructor() {
        super("app.protos.Characteristic", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "charWeight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "numVal", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "listVal", kind: "message", oneof: "value", T: () => StringList }
        ]);
    }
    create(value?: PartialMessage<Characteristic>): Characteristic {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.name = "";
        message.charWeight = 0;
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Characteristic>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Characteristic): Characteristic {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* double charWeight */ 3:
                    message.charWeight = reader.double();
                    break;
                case /* double numVal */ 4:
                    message.value = {
                        oneofKind: "numVal",
                        numVal: reader.double()
                    };
                    break;
                case /* app.protos.StringList listVal */ 5:
                    message.value = {
                        oneofKind: "listVal",
                        listVal: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).listVal)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Characteristic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* double charWeight = 3; */
        if (message.charWeight !== 0)
            writer.tag(3, WireType.Bit64).double(message.charWeight);
        /* double numVal = 4; */
        if (message.value.oneofKind === "numVal")
            writer.tag(4, WireType.Bit64).double(message.value.numVal);
        /* app.protos.StringList listVal = 5; */
        if (message.value.oneofKind === "listVal")
            StringList.internalBinaryWrite(message.value.listVal, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.Characteristic
 */
export const Characteristic = new Characteristic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FiltersRequest$Type extends MessageType<FiltersRequest> {
    constructor() {
        super("app.protos.FiltersRequest", [
            { no: 1, name: "market", kind: "enum", T: () => ["app.protos.Markets", Markets] },
            { no: 2, name: "categoryUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FiltersRequest>): FiltersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.market = 0;
        message.categoryUrl = "";
        if (value !== undefined)
            reflectionMergePartial<FiltersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FiltersRequest): FiltersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Markets market */ 1:
                    message.market = reader.int32();
                    break;
                case /* string categoryUrl */ 2:
                    message.categoryUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FiltersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Markets market = 1; */
        if (message.market !== 0)
            writer.tag(1, WireType.Varint).int32(message.market);
        /* string categoryUrl = 2; */
        if (message.categoryUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.categoryUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.FiltersRequest
 */
export const FiltersRequest = new FiltersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterResponse$Type extends MessageType<FilterResponse> {
    constructor() {
        super("app.protos.FilterResponse", [
            { no: 1, name: "filter", kind: "message", oneof: "message", T: () => Filter },
            { no: 2, name: "status", kind: "message", oneof: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<FilterResponse>): FilterResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FilterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterResponse): FilterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Filter filter */ 1:
                    message.message = {
                        oneofKind: "filter",
                        filter: Filter.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).filter)
                    };
                    break;
                case /* google.rpc.Status status */ 2:
                    message.message = {
                        oneofKind: "status",
                        status: Status.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).status)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Filter filter = 1; */
        if (message.message.oneofKind === "filter")
            Filter.internalBinaryWrite(message.message.filter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status status = 2; */
        if (message.message.oneofKind === "status")
            Status.internalBinaryWrite(message.message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.FilterResponse
 */
export const FilterResponse = new FilterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("app.protos.Filter", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "externalType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "internalType", kind: "enum", T: () => ["app.protos.Filters", Filters] },
            { no: 5, name: "rangeFilter", kind: "message", oneof: "data", T: () => RangeFilter },
            { no: 6, name: "selectionFilter", kind: "message", oneof: "data", T: () => SelectionFilter },
            { no: 7, name: "boolFilter", kind: "message", oneof: "data", T: () => BoolFilter }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.key = "";
        message.externalType = "";
        message.internalType = 0;
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string key */ 2:
                    message.key = reader.string();
                    break;
                case /* string externalType */ 3:
                    message.externalType = reader.string();
                    break;
                case /* app.protos.Filters internalType */ 4:
                    message.internalType = reader.int32();
                    break;
                case /* app.protos.RangeFilter rangeFilter */ 5:
                    message.data = {
                        oneofKind: "rangeFilter",
                        rangeFilter: RangeFilter.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).rangeFilter)
                    };
                    break;
                case /* app.protos.SelectionFilter selectionFilter */ 6:
                    message.data = {
                        oneofKind: "selectionFilter",
                        selectionFilter: SelectionFilter.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).selectionFilter)
                    };
                    break;
                case /* app.protos.BoolFilter boolFilter */ 7:
                    message.data = {
                        oneofKind: "boolFilter",
                        boolFilter: BoolFilter.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).boolFilter)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string key = 2; */
        if (message.key !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.key);
        /* string externalType = 3; */
        if (message.externalType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.externalType);
        /* app.protos.Filters internalType = 4; */
        if (message.internalType !== 0)
            writer.tag(4, WireType.Varint).int32(message.internalType);
        /* app.protos.RangeFilter rangeFilter = 5; */
        if (message.data.oneofKind === "rangeFilter")
            RangeFilter.internalBinaryWrite(message.data.rangeFilter, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* app.protos.SelectionFilter selectionFilter = 6; */
        if (message.data.oneofKind === "selectionFilter")
            SelectionFilter.internalBinaryWrite(message.data.selectionFilter, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* app.protos.BoolFilter boolFilter = 7; */
        if (message.data.oneofKind === "boolFilter")
            BoolFilter.internalBinaryWrite(message.data.boolFilter, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.Filter
 */
export const Filter = new Filter$Type();
/**
 * @generated ServiceType for protobuf service app.protos.ItemParser
 */
export const ItemParser = new ServiceType("app.protos.ItemParser", [
    { name: "GetItems", serverStreaming: true, options: {}, I: ItemsRequest, O: ItemResponse },
    { name: "GetItemCharacteristics", serverStreaming: true, options: {}, I: CharacteristicsRequest, O: CharacteristicResponse },
    { name: "GetCategoryFilters", serverStreaming: true, options: {}, I: FiltersRequest, O: FilterResponse }
]);
