// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/categories.proto" (package "app.protos", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../google/rpc/status";
import { Markets } from "./types";
/**
 * @generated from protobuf message app.protos.RootCategoriesRequest
 */
export interface RootCategoriesRequest {
    /**
     * @generated from protobuf field: app.protos.Markets market = 1;
     */
    market: Markets;
}
/**
 * @generated from protobuf message app.protos.SubCategoriesRequest
 */
export interface SubCategoriesRequest {
    /**
     * @generated from protobuf field: app.protos.Markets market = 1;
     */
    market: Markets;
    /**
     * @generated from protobuf field: string categoryUrl = 2;
     */
    categoryUrl: string;
}
/**
 * @generated from protobuf message app.protos.CategoryResponse
 */
export interface CategoryResponse {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "category";
        /**
         * @generated from protobuf field: app.protos.Category category = 1;
         */
        category: Category;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: google.rpc.Status status = 2;
         */
        status: Status;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: optional string parentUrl = 3;
     */
    parentUrl?: string;
    /**
     * @generated from protobuf field: optional bool isParsed = 4;
     */
    isParsed?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RootCategoriesRequest$Type extends MessageType<RootCategoriesRequest> {
    constructor() {
        super("app.protos.RootCategoriesRequest", [
            { no: 1, name: "market", kind: "enum", T: () => ["app.protos.Markets", Markets] }
        ]);
    }
    create(value?: PartialMessage<RootCategoriesRequest>): RootCategoriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.market = 0;
        if (value !== undefined)
            reflectionMergePartial<RootCategoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RootCategoriesRequest): RootCategoriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Markets market */ 1:
                    message.market = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RootCategoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Markets market = 1; */
        if (message.market !== 0)
            writer.tag(1, WireType.Varint).int32(message.market);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.RootCategoriesRequest
 */
export const RootCategoriesRequest = new RootCategoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubCategoriesRequest$Type extends MessageType<SubCategoriesRequest> {
    constructor() {
        super("app.protos.SubCategoriesRequest", [
            { no: 1, name: "market", kind: "enum", T: () => ["app.protos.Markets", Markets] },
            { no: 2, name: "categoryUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubCategoriesRequest>): SubCategoriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.market = 0;
        message.categoryUrl = "";
        if (value !== undefined)
            reflectionMergePartial<SubCategoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubCategoriesRequest): SubCategoriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Markets market */ 1:
                    message.market = reader.int32();
                    break;
                case /* string categoryUrl */ 2:
                    message.categoryUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubCategoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Markets market = 1; */
        if (message.market !== 0)
            writer.tag(1, WireType.Varint).int32(message.market);
        /* string categoryUrl = 2; */
        if (message.categoryUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.categoryUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.SubCategoriesRequest
 */
export const SubCategoriesRequest = new SubCategoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryResponse$Type extends MessageType<CategoryResponse> {
    constructor() {
        super("app.protos.CategoryResponse", [
            { no: 1, name: "category", kind: "message", oneof: "message", T: () => Category },
            { no: 2, name: "status", kind: "message", oneof: "message", T: () => Status }
        ]);
    }
    create(value?: PartialMessage<CategoryResponse>): CategoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<CategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryResponse): CategoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Category category */ 1:
                    message.message = {
                        oneofKind: "category",
                        category: Category.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).category)
                    };
                    break;
                case /* google.rpc.Status status */ 2:
                    message.message = {
                        oneofKind: "status",
                        status: Status.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).status)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Category category = 1; */
        if (message.message.oneofKind === "category")
            Category.internalBinaryWrite(message.message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.rpc.Status status = 2; */
        if (message.message.oneofKind === "status")
            Status.internalBinaryWrite(message.message.status, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.CategoryResponse
 */
export const CategoryResponse = new CategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("app.protos.Category", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "parentUrl", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "isParsed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* optional string parentUrl */ 3:
                    message.parentUrl = reader.string();
                    break;
                case /* optional bool isParsed */ 4:
                    message.isParsed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* optional string parentUrl = 3; */
        if (message.parentUrl !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.parentUrl);
        /* optional bool isParsed = 4; */
        if (message.isParsed !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isParsed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.Category
 */
export const Category = new Category$Type();
/**
 * @generated ServiceType for protobuf service app.protos.CategoryParser
 */
export const CategoryParser = new ServiceType("app.protos.CategoryParser", [
    { name: "GetRootCategories", serverStreaming: true, options: {}, I: RootCategoriesRequest, O: CategoryResponse },
    { name: "GetSubCategories", serverStreaming: true, options: {}, I: SubCategoriesRequest, O: CategoryResponse }
]);
