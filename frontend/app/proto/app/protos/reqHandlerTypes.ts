// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/reqHandlerTypes.proto" (package "app.protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Characteristic } from "./items";
import { Item } from "./items";
import { StringList } from "./types";
import { ItemsRequest } from "./items";
/**
 * @generated from protobuf message app.protos.ItemsRequestWithPrefs
 */
export interface ItemsRequestWithPrefs {
    /**
     * @generated from protobuf field: app.protos.ItemsRequest request = 1;
     */
    request?: ItemsRequest;
    /**
     * @generated from protobuf field: map<string, app.protos.UserPref> prefs = 2;
     */
    prefs: {
        [key: string]: UserPref;
    };
}
/**
 * @generated from protobuf message app.protos.UserPref
 */
export interface UserPref {
    /**
     * @generated from protobuf field: int32 priority = 1;
     */
    priority: number;
    /**
     * @generated from protobuf oneof: value
     */
    value: {
        oneofKind: "numVal";
        /**
         * @generated from protobuf field: double numVal = 2;
         */
        numVal: number;
    } | {
        oneofKind: "listVal";
        /**
         * @generated from protobuf field: app.protos.StringList listVal = 3;
         */
        listVal: StringList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message app.protos.ItemExtended
 */
export interface ItemExtended {
    /**
     * @generated from protobuf field: app.protos.Item item = 1;
     */
    item?: Item;
    /**
     * @generated from protobuf field: repeated app.protos.Item similar = 2;
     */
    similar: Item[];
    /**
     * @generated from protobuf field: double totalWeight = 3;
     */
    totalWeight: number;
    /**
     * @generated from protobuf field: repeated app.protos.Characteristic chars = 4;
     */
    chars: Characteristic[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ItemsRequestWithPrefs$Type extends MessageType<ItemsRequestWithPrefs> {
    constructor() {
        super("app.protos.ItemsRequestWithPrefs", [
            { no: 1, name: "request", kind: "message", T: () => ItemsRequest },
            { no: 2, name: "prefs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => UserPref } }
        ]);
    }
    create(value?: PartialMessage<ItemsRequestWithPrefs>): ItemsRequestWithPrefs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.prefs = {};
        if (value !== undefined)
            reflectionMergePartial<ItemsRequestWithPrefs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemsRequestWithPrefs): ItemsRequestWithPrefs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.ItemsRequest request */ 1:
                    message.request = ItemsRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* map<string, app.protos.UserPref> prefs */ 2:
                    this.binaryReadMap2(message.prefs, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ItemsRequestWithPrefs["prefs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ItemsRequestWithPrefs["prefs"] | undefined, val: ItemsRequestWithPrefs["prefs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = UserPref.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field app.protos.ItemsRequestWithPrefs.prefs");
            }
        }
        map[key ?? ""] = val ?? UserPref.create();
    }
    internalBinaryWrite(message: ItemsRequestWithPrefs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.ItemsRequest request = 1; */
        if (message.request)
            ItemsRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* map<string, app.protos.UserPref> prefs = 2; */
        for (let k of globalThis.Object.keys(message.prefs)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            UserPref.internalBinaryWrite(message.prefs[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.ItemsRequestWithPrefs
 */
export const ItemsRequestWithPrefs = new ItemsRequestWithPrefs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserPref$Type extends MessageType<UserPref> {
    constructor() {
        super("app.protos.UserPref", [
            { no: 1, name: "priority", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "numVal", kind: "scalar", oneof: "value", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "listVal", kind: "message", oneof: "value", T: () => StringList }
        ]);
    }
    create(value?: PartialMessage<UserPref>): UserPref {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.priority = 0;
        message.value = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UserPref>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserPref): UserPref {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 priority */ 1:
                    message.priority = reader.int32();
                    break;
                case /* double numVal */ 2:
                    message.value = {
                        oneofKind: "numVal",
                        numVal: reader.double()
                    };
                    break;
                case /* app.protos.StringList listVal */ 3:
                    message.value = {
                        oneofKind: "listVal",
                        listVal: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).listVal)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserPref, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 priority = 1; */
        if (message.priority !== 0)
            writer.tag(1, WireType.Varint).int32(message.priority);
        /* double numVal = 2; */
        if (message.value.oneofKind === "numVal")
            writer.tag(2, WireType.Bit64).double(message.value.numVal);
        /* app.protos.StringList listVal = 3; */
        if (message.value.oneofKind === "listVal")
            StringList.internalBinaryWrite(message.value.listVal, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.UserPref
 */
export const UserPref = new UserPref$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemExtended$Type extends MessageType<ItemExtended> {
    constructor() {
        super("app.protos.ItemExtended", [
            { no: 1, name: "item", kind: "message", T: () => Item },
            { no: 2, name: "similar", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 3, name: "totalWeight", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "chars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Characteristic }
        ]);
    }
    create(value?: PartialMessage<ItemExtended>): ItemExtended {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.similar = [];
        message.totalWeight = 0;
        message.chars = [];
        if (value !== undefined)
            reflectionMergePartial<ItemExtended>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemExtended): ItemExtended {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* app.protos.Item item */ 1:
                    message.item = Item.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* repeated app.protos.Item similar */ 2:
                    message.similar.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* double totalWeight */ 3:
                    message.totalWeight = reader.double();
                    break;
                case /* repeated app.protos.Characteristic chars */ 4:
                    message.chars.push(Characteristic.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemExtended, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* app.protos.Item item = 1; */
        if (message.item)
            Item.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated app.protos.Item similar = 2; */
        for (let i = 0; i < message.similar.length; i++)
            Item.internalBinaryWrite(message.similar[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* double totalWeight = 3; */
        if (message.totalWeight !== 0)
            writer.tag(3, WireType.Bit64).double(message.totalWeight);
        /* repeated app.protos.Characteristic chars = 4; */
        for (let i = 0; i < message.chars.length; i++)
            Characteristic.internalBinaryWrite(message.chars[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.ItemExtended
 */
export const ItemExtended = new ItemExtended$Type();
