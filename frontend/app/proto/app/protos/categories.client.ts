// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/categories.proto" (package "app.protos", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CategoryParser } from "./categories";
import type { SubCategoriesRequest } from "./categories";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CategoryResponse } from "./categories";
import type { RootCategoriesRequest } from "./categories";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service app.protos.CategoryParser
 */
export interface ICategoryParserClient {
    /**
     * @generated from protobuf rpc: GetRootCategories(app.protos.RootCategoriesRequest) returns (stream app.protos.CategoryResponse);
     */
    getRootCategories(input: RootCategoriesRequest, options?: RpcOptions): ServerStreamingCall<RootCategoriesRequest, CategoryResponse>;
    /**
     * @generated from protobuf rpc: GetSubCategories(app.protos.SubCategoriesRequest) returns (stream app.protos.CategoryResponse);
     */
    getSubCategories(input: SubCategoriesRequest, options?: RpcOptions): ServerStreamingCall<SubCategoriesRequest, CategoryResponse>;
}
/**
 * @generated from protobuf service app.protos.CategoryParser
 */
export class CategoryParserClient implements ICategoryParserClient, ServiceInfo {
    typeName = CategoryParser.typeName;
    methods = CategoryParser.methods;
    options = CategoryParser.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetRootCategories(app.protos.RootCategoriesRequest) returns (stream app.protos.CategoryResponse);
     */
    getRootCategories(input: RootCategoriesRequest, options?: RpcOptions): ServerStreamingCall<RootCategoriesRequest, CategoryResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RootCategoriesRequest, CategoryResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSubCategories(app.protos.SubCategoriesRequest) returns (stream app.protos.CategoryResponse);
     */
    getSubCategories(input: SubCategoriesRequest, options?: RpcOptions): ServerStreamingCall<SubCategoriesRequest, CategoryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubCategoriesRequest, CategoryResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
