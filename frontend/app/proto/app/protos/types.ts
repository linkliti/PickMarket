// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "app/protos/types.proto" (package "app.protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message app.protos.RangeFilter
 */
export interface RangeFilter {
    /**
     * @generated from protobuf field: double min = 1;
     */
    min: number;
    /**
     * @generated from protobuf field: double max = 2;
     */
    max: number;
}
/**
 * @generated from protobuf message app.protos.SelectionFilterItem
 */
export interface SelectionFilterItem {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated from protobuf message app.protos.SelectionFilter
 */
export interface SelectionFilter {
    /**
     * @generated from protobuf field: bool isRadio = 1;
     */
    isRadio: boolean;
    /**
     * @generated from protobuf field: repeated app.protos.SelectionFilterItem items = 2;
     */
    items: SelectionFilterItem[];
}
/**
 * @generated from protobuf message app.protos.BoolFilter
 */
export interface BoolFilter {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated from protobuf message app.protos.StringList
 */
export interface StringList {
    /**
     * @generated from protobuf field: repeated string values = 1;
     */
    values: string[];
}
/**
 * @generated from protobuf enum app.protos.Markets
 */
export enum Markets {
    /**
     * @generated from protobuf enum value: OZON = 0;
     */
    OZON = 0
}
/**
 * @generated from protobuf enum app.protos.Filters
 */
export enum Filters {
    /**
     * @generated from protobuf enum value: RANGE = 0;
     */
    RANGE = 0,
    /**
     * @generated from protobuf enum value: SELECTION = 1;
     */
    SELECTION = 1,
    /**
     * @generated from protobuf enum value: SELECTIONRADIO = 2;
     */
    SELECTIONRADIO = 2,
    /**
     * @generated from protobuf enum value: BOOL = 3;
     */
    BOOL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class RangeFilter$Type extends MessageType<RangeFilter> {
    constructor() {
        super("app.protos.RangeFilter", [
            { no: 1, name: "min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "max", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<RangeFilter>): RangeFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<RangeFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RangeFilter): RangeFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double min */ 1:
                    message.min = reader.double();
                    break;
                case /* double max */ 2:
                    message.max = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RangeFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Bit64).double(message.min);
        /* double max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Bit64).double(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.RangeFilter
 */
export const RangeFilter = new RangeFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectionFilterItem$Type extends MessageType<SelectionFilterItem> {
    constructor() {
        super("app.protos.SelectionFilterItem", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SelectionFilterItem>): SelectionFilterItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<SelectionFilterItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectionFilterItem): SelectionFilterItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectionFilterItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.SelectionFilterItem
 */
export const SelectionFilterItem = new SelectionFilterItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectionFilter$Type extends MessageType<SelectionFilter> {
    constructor() {
        super("app.protos.SelectionFilter", [
            { no: 1, name: "isRadio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SelectionFilterItem }
        ]);
    }
    create(value?: PartialMessage<SelectionFilter>): SelectionFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isRadio = false;
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<SelectionFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SelectionFilter): SelectionFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isRadio */ 1:
                    message.isRadio = reader.bool();
                    break;
                case /* repeated app.protos.SelectionFilterItem items */ 2:
                    message.items.push(SelectionFilterItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SelectionFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isRadio = 1; */
        if (message.isRadio !== false)
            writer.tag(1, WireType.Varint).bool(message.isRadio);
        /* repeated app.protos.SelectionFilterItem items = 2; */
        for (let i = 0; i < message.items.length; i++)
            SelectionFilterItem.internalBinaryWrite(message.items[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.SelectionFilter
 */
export const SelectionFilter = new SelectionFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BoolFilter$Type extends MessageType<BoolFilter> {
    constructor() {
        super("app.protos.BoolFilter", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BoolFilter>): BoolFilter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<BoolFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BoolFilter): BoolFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BoolFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.BoolFilter
 */
export const BoolFilter = new BoolFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringList$Type extends MessageType<StringList> {
    constructor() {
        super("app.protos.StringList", [
            { no: 1, name: "values", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringList>): StringList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<StringList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringList): StringList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string values */ 1:
                    message.values.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string values = 1; */
        for (let i = 0; i < message.values.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.values[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message app.protos.StringList
 */
export const StringList = new StringList$Type();
