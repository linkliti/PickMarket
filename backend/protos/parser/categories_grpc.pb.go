// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: app/protos/categories.proto

package parser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CategoryParser_GetRootCategories_FullMethodName  = "/app.protos.CategoryParser/GetRootCategories"
	CategoryParser_GetSubCategories_FullMethodName   = "/app.protos.CategoryParser/GetSubCategories"
	CategoryParser_GetCategoryFilters_FullMethodName = "/app.protos.CategoryParser/GetCategoryFilters"
)

// CategoryParserClient is the client API for CategoryParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryParserClient interface {
	GetRootCategories(ctx context.Context, in *RootCategoriesRequest, opts ...grpc.CallOption) (CategoryParser_GetRootCategoriesClient, error)
	GetSubCategories(ctx context.Context, in *SubCategoriesRequest, opts ...grpc.CallOption) (CategoryParser_GetSubCategoriesClient, error)
	GetCategoryFilters(ctx context.Context, in *FiltersRequest, opts ...grpc.CallOption) (CategoryParser_GetCategoryFiltersClient, error)
}

type categoryParserClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryParserClient(cc grpc.ClientConnInterface) CategoryParserClient {
	return &categoryParserClient{cc}
}

func (c *categoryParserClient) GetRootCategories(ctx context.Context, in *RootCategoriesRequest, opts ...grpc.CallOption) (CategoryParser_GetRootCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoryParser_ServiceDesc.Streams[0], CategoryParser_GetRootCategories_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoryParserGetRootCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoryParser_GetRootCategoriesClient interface {
	Recv() (*CategoryResponse, error)
	grpc.ClientStream
}

type categoryParserGetRootCategoriesClient struct {
	grpc.ClientStream
}

func (x *categoryParserGetRootCategoriesClient) Recv() (*CategoryResponse, error) {
	m := new(CategoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoryParserClient) GetSubCategories(ctx context.Context, in *SubCategoriesRequest, opts ...grpc.CallOption) (CategoryParser_GetSubCategoriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoryParser_ServiceDesc.Streams[1], CategoryParser_GetSubCategories_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoryParserGetSubCategoriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoryParser_GetSubCategoriesClient interface {
	Recv() (*CategoryResponse, error)
	grpc.ClientStream
}

type categoryParserGetSubCategoriesClient struct {
	grpc.ClientStream
}

func (x *categoryParserGetSubCategoriesClient) Recv() (*CategoryResponse, error) {
	m := new(CategoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *categoryParserClient) GetCategoryFilters(ctx context.Context, in *FiltersRequest, opts ...grpc.CallOption) (CategoryParser_GetCategoryFiltersClient, error) {
	stream, err := c.cc.NewStream(ctx, &CategoryParser_ServiceDesc.Streams[2], CategoryParser_GetCategoryFilters_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &categoryParserGetCategoryFiltersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CategoryParser_GetCategoryFiltersClient interface {
	Recv() (*FilterResponse, error)
	grpc.ClientStream
}

type categoryParserGetCategoryFiltersClient struct {
	grpc.ClientStream
}

func (x *categoryParserGetCategoryFiltersClient) Recv() (*FilterResponse, error) {
	m := new(FilterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CategoryParserServer is the server API for CategoryParser service.
// All implementations must embed UnimplementedCategoryParserServer
// for forward compatibility
type CategoryParserServer interface {
	GetRootCategories(*RootCategoriesRequest, CategoryParser_GetRootCategoriesServer) error
	GetSubCategories(*SubCategoriesRequest, CategoryParser_GetSubCategoriesServer) error
	GetCategoryFilters(*FiltersRequest, CategoryParser_GetCategoryFiltersServer) error
	mustEmbedUnimplementedCategoryParserServer()
}

// UnimplementedCategoryParserServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryParserServer struct {
}

func (UnimplementedCategoryParserServer) GetRootCategories(*RootCategoriesRequest, CategoryParser_GetRootCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRootCategories not implemented")
}
func (UnimplementedCategoryParserServer) GetSubCategories(*SubCategoriesRequest, CategoryParser_GetSubCategoriesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSubCategories not implemented")
}
func (UnimplementedCategoryParserServer) GetCategoryFilters(*FiltersRequest, CategoryParser_GetCategoryFiltersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCategoryFilters not implemented")
}
func (UnimplementedCategoryParserServer) mustEmbedUnimplementedCategoryParserServer() {}

// UnsafeCategoryParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryParserServer will
// result in compilation errors.
type UnsafeCategoryParserServer interface {
	mustEmbedUnimplementedCategoryParserServer()
}

func RegisterCategoryParserServer(s grpc.ServiceRegistrar, srv CategoryParserServer) {
	s.RegisterService(&CategoryParser_ServiceDesc, srv)
}

func _CategoryParser_GetRootCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RootCategoriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoryParserServer).GetRootCategories(m, &categoryParserGetRootCategoriesServer{stream})
}

type CategoryParser_GetRootCategoriesServer interface {
	Send(*CategoryResponse) error
	grpc.ServerStream
}

type categoryParserGetRootCategoriesServer struct {
	grpc.ServerStream
}

func (x *categoryParserGetRootCategoriesServer) Send(m *CategoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoryParser_GetSubCategories_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubCategoriesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoryParserServer).GetSubCategories(m, &categoryParserGetSubCategoriesServer{stream})
}

type CategoryParser_GetSubCategoriesServer interface {
	Send(*CategoryResponse) error
	grpc.ServerStream
}

type categoryParserGetSubCategoriesServer struct {
	grpc.ServerStream
}

func (x *categoryParserGetSubCategoriesServer) Send(m *CategoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CategoryParser_GetCategoryFilters_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FiltersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CategoryParserServer).GetCategoryFilters(m, &categoryParserGetCategoryFiltersServer{stream})
}

type CategoryParser_GetCategoryFiltersServer interface {
	Send(*FilterResponse) error
	grpc.ServerStream
}

type categoryParserGetCategoryFiltersServer struct {
	grpc.ServerStream
}

func (x *categoryParserGetCategoryFiltersServer) Send(m *FilterResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CategoryParser_ServiceDesc is the grpc.ServiceDesc for CategoryParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CategoryParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.protos.CategoryParser",
	HandlerType: (*CategoryParserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRootCategories",
			Handler:       _CategoryParser_GetRootCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSubCategories",
			Handler:       _CategoryParser_GetSubCategories_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCategoryFilters",
			Handler:       _CategoryParser_GetCategoryFilters_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "app/protos/categories.proto",
}
