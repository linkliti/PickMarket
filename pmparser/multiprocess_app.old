""" Server Module """
import contextlib
import logging
import os
from concurrent import futures
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, wait
import socket

import grpc
import multiprocessing
from app.grpcs.categoryParserServicer import PMCategoryParserServicer
from app.grpcs.itemParserServicer import PMItemParserServicer
from app.protos import categories_pb2_grpc as categPBgrpc
from app.protos import items_pb2_grpc as itemsPBgrpc
from app.selen.seleniumMarkets import SeleniumWorkerMarkets
from app.selen.seleniumPool import browserQueue
from app.utilities.log import setupLogger

DEBUG = bool(os.environ.get('DEBUG', False))
# _PROCESS_COUNT = multiprocessing.cpu_count()
_PROCESS_COUNT = 2
log: logging.Logger = setupLogger(name='root', debug=DEBUG)


@contextlib.contextmanager
def _reserve_port():
  """Find and reserve a port for all subprocesses to use."""
  sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT, 1)
  if sock.getsockopt(socket.SOL_SOCKET, socket.SO_REUSEPORT) == 0:
    raise RuntimeError("Failed to set SO_REUSEPORT.")
  sock.bind(("", 0))
  try:
    yield sock.getsockname()[1]
  finally:
    sock.close()


def main() -> None:
  """ Create multiprocess server"""
  with _reserve_port() as port:
    bindAddress: str = os.environ.get('address', f"localhost:{port}")
    workerCount = 2
    for _ in range(workerCount):
      worker = SeleniumWorkerMarkets()
      browserQueue.put(worker)
    # with ThreadPoolExecutor() as executor:
    #   executor.map(setCookies, browserQueue.queue)
    log.info("Browsers started. Worker count: %d", workerCount)

    log.info("Binding to '%s'", bindAddress)
    with ProcessPoolExecutor(max_workers=_PROCESS_COUNT) as executor:
      servers = [executor.submit(serve, bindAddress) for _ in range(_PROCESS_COUNT)]
      wait(servers)


def serve(bindAddress: str) -> None:
  """ Server """
  print(f"Queue length: {len(browserQueue.queue)}")
  options: tuple = (("grpc.so_reuseport", 1),)
  server = grpc.server(thread_pool=futures.ThreadPoolExecutor(), options=options)
  itemsPBgrpc.add_ItemParserServicer_to_server(servicer=PMItemParserServicer(), server=server)
  categPBgrpc.add_CategoryParserServicer_to_server(servicer=PMCategoryParserServicer(),
                                                   server=server)
  server.add_insecure_port(address=bindAddress)
  if DEBUG:
    log.info("Debug enabled")

  server.start()
  print(f"Server started, listening on {bindAddress}")
  log.info("Server started, listening on %s", bindAddress)
  server.wait_for_termination()


def setCookies(worker: SeleniumWorkerMarkets) -> None:
  """ Call setOzonAdultCookies """
  worker.setOzonAdultCookies()


if __name__ == '__main__':
  main()
